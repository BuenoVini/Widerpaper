<div id="display-drop-area" class="mt-5" style="position: relative;">
    @if (_isImageUploaded == false)
    {
        <InputFile class="drop-area" OnChange="LoadImage" @ondragenter="HandleDragEnter" @ondragleave="HandleDragLeave"/>
        
        <div class="text-muted" style="z-index: -1; position: absolute;">
            <i class="bi @_imgIcon text-light" style="font-size: 7.5em;"></i>
            @* <button type="button" class="btn btn-primary align-self-center mb-2">Browse</button> *@
            @if (_isDraggingImage == false)
            {
                <p><span class="@_linkColor fw-bold">Click to browse</span> or drag an image here</p>
            }
            else
            {
                <p>Drop the image to upload it</p>
            }
        </div>
    }
    else
    {
        @* <img src="Uploads/target.jpg" class="img-fluid" alt="Image uploaded by the user."/> *@
        <h1>Image being processed, hold on...</h1>
    }
</div>

@code {

    abstract class State
    {
        public readonly string Default;
        public readonly string Active;

        protected State(string @default, string active)
        {
            Default = @default;
            Active = active;
        }
    }
    
    class Color : State { public Color(string @default, string active) : base(@default, active) {} }
    class Icon : State { public Icon(string @default, string active) : base(@default, active) {} }

    private readonly Color _color = new ("text-primary", "text-info"); 
    private readonly Icon _icon = new ("bi-image", "bi-cloud-arrow-up-fill");
    
    private string _linkColor = "";
    private string _imgIcon = "";
    
    private bool _isImageUploaded; 
    private bool _isDraggingImage;

    protected override void OnInitialized() => SetComponentState();

    private void HandleDragEnter() => SetComponentState(true);
    private void HandleDragLeave() => SetComponentState();

    private void SetComponentState(bool isActivated = false)
    {
        _linkColor = isActivated ? _color.Active : _color.Default;
        _imgIcon = isActivated ? _icon.Active : _icon.Default;
        _isDraggingImage = isActivated;
    }

    private async Task LoadImage(InputFileChangeEventArgs e)
    {
        await using var stream = new FileStream("wwwroot/Uploads/target.jpg", FileMode.Create);
        await e.File.OpenReadStream(5 * 1024 * 1024).CopyToAsync(stream);

        SetComponentState();
        _isImageUploaded = true;
    }
}